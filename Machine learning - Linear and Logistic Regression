{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fb6f5dcf",
   "metadata": {},
   "source": [
    "# Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "id": "6a95d784",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "id": "e732e1b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing the CSV\n",
    "winequality_red=pd.read_csv(\"/Users/sumanthmeela/Desktop/Course/Machine Learning/datasets/winequality-red.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "25fb8f94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>quality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.9978</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0.098</td>\n",
       "      <td>25.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0.9968</td>\n",
       "      <td>3.20</td>\n",
       "      <td>0.68</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.04</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0.092</td>\n",
       "      <td>15.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0.9970</td>\n",
       "      <td>3.26</td>\n",
       "      <td>0.65</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.2</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.56</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.075</td>\n",
       "      <td>17.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0.9980</td>\n",
       "      <td>3.16</td>\n",
       "      <td>0.58</td>\n",
       "      <td>9.8</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.9978</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
       "0            7.4              0.70         0.00             1.9      0.076   \n",
       "1            7.8              0.88         0.00             2.6      0.098   \n",
       "2            7.8              0.76         0.04             2.3      0.092   \n",
       "3           11.2              0.28         0.56             1.9      0.075   \n",
       "4            7.4              0.70         0.00             1.9      0.076   \n",
       "\n",
       "   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
       "0                 11.0                  34.0   0.9978  3.51       0.56   \n",
       "1                 25.0                  67.0   0.9968  3.20       0.68   \n",
       "2                 15.0                  54.0   0.9970  3.26       0.65   \n",
       "3                 17.0                  60.0   0.9980  3.16       0.58   \n",
       "4                 11.0                  34.0   0.9978  3.51       0.56   \n",
       "\n",
       "   alcohol  quality  \n",
       "0      9.4        5  \n",
       "1      9.8        5  \n",
       "2      9.8        5  \n",
       "3      9.8        6  \n",
       "4      9.4        5  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "winequality_red.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8c28b384",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fixed acidity           0\n",
      "volatile acidity        0\n",
      "citric acid             0\n",
      "residual sugar          0\n",
      "chlorides               0\n",
      "free sulfur dioxide     0\n",
      "total sulfur dioxide    0\n",
      "density                 0\n",
      "pH                      0\n",
      "sulphates               0\n",
      "alcohol                 0\n",
      "quality                 0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(winequality_red.isnull().sum())\n",
    "#No null values, so no need to omit any row"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ba1f137f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3.51]\n",
      " [3.2 ]\n",
      " [3.26]\n",
      " ...\n",
      " [3.42]\n",
      " [3.57]\n",
      " [3.39]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "#Build a matrix for X and Y\n",
    "#Input features includes all the columns except pH\n",
    "X=np.matrix(winequality_red.drop(\"pH\",axis=1).values)\n",
    "#Output features includes pH\n",
    "Y=np.matrix(winequality_red[\"pH\"].values).T\n",
    "print(Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1366380b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#To randomize the order\n",
    "np.random.seed(123)\n",
    "#Total no of rows\n",
    "Tot_samples=X.shape[0]\n",
    "#Splitting train data by X 0.8 over total samples\n",
    "Train_samples=int(0.8*Tot_samples)\n",
    "Test_samples=Tot_samples-Train_samples\n",
    "#Giving index to the total_samples \n",
    "index = np.arange(Tot_samples)\n",
    "#Shuffling the index\n",
    "np.random.shuffle(index)\n",
    "#Selecting first number of train rows from randmo shuffling\n",
    "Train_rows=index[:Train_samples]\n",
    "#Selecting the last rows after total number of train rows\n",
    "Test_rows=index[Train_samples:]\n",
    "\n",
    "X_train = X[Train_rows]\n",
    "Y_train = Y[Train_rows]\n",
    "X_test = X[Test_rows]\n",
    "Y_test = Y[Test_rows]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4e29c395",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape: (1279, 11)\n",
      "y_train shape: (1279, 1)\n",
      "X_test shape: (320, 11)\n",
      "y_test shape: (320, 1)\n"
     ]
    }
   ],
   "source": [
    "#Shapes of train and test data\n",
    "print(\"X_train shape:\", X_train.shape)\n",
    "print(\"y_train shape:\", Y_train.shape)\n",
    "print(\"X_test shape:\", X_test.shape)\n",
    "print(\"y_test shape:\", Y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "d7755faf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-5.60775963e-02]\n",
      " [ 6.91218791e-02]\n",
      " [-4.86351728e-02]\n",
      " [-6.18530059e-05]\n",
      " [-6.22777112e-01]\n",
      " [ 1.23798558e-03]\n",
      " [-8.13084523e-04]\n",
      " [ 3.66498506e+00]\n",
      " [ 1.94210620e-02]\n",
      " [ 2.40783755e-02]\n",
      " [-1.55705981e-02]]\n"
     ]
    }
   ],
   "source": [
    "#Finding weights by the equation w = (XT X)âˆ’1 XT y\n",
    "w=np.linalg.inv(X_train.T*X_train)*X_train.T*Y_train\n",
    "\n",
    "print(w)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "edf21f03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.366417900827303\n"
     ]
    }
   ],
   "source": [
    "#Finding Y train from the weights given\n",
    "Y_train_predicted=X_train*w\n",
    "#Residuals from the actual value\n",
    "Y_train_residuals=Y_train-Y_train_predicted\n",
    "#Squaring the residuals\n",
    "MSE_train_squares=np.square(Y_train_residuals)\n",
    "#Summing up the residuals\n",
    "MSE_train=np.sum(MSE_train_squares)\n",
    "print(MSE_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "484a2328",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.9610017475332753\n"
     ]
    }
   ],
   "source": [
    "#Finding Y test from the weights given\n",
    "Y_test_predicted=X_test*w\n",
    "#Residuals from the actual value\n",
    "Y_test_residuals=Y_test-Y_test_predicted\n",
    "#Squaring the residuals\n",
    "MSE_test_squares=np.square(Y_test_residuals)\n",
    "#Summing up the residuals\n",
    "MSE_test=np.sum(MSE_test_squares)\n",
    "print(MSE_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "df6e7267",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plotting the graph of actual Y and predicted Y\n",
    "Y_predicted=X*w\n",
    "Y_actual_array=np.array(Y)\n",
    "Y_predicted_array=np.array(Y_predicted)\n",
    "plt.scatter(Y_actual_array, Y_predicted_array, label='Actual vs. Predicted', marker='o', s=20)\n",
    "plt.xlabel('Y_actual')\n",
    "plt.ylabel('Y_predicted')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ffff911",
   "metadata": {},
   "source": [
    "# Logisitic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "caedbf7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  species     island  bill_length_mm  bill_depth_mm  flipper_length_mm  \\\n",
      "0  Adelie  Torgersen            39.1           18.7              181.0   \n",
      "1  Adelie  Torgersen            39.5           17.4              186.0   \n",
      "2  Adelie  Torgersen            40.3           18.0              195.0   \n",
      "3  Adelie  Torgersen             NaN            NaN                NaN   \n",
      "4  Adelie  Torgersen            36.7           19.3              193.0   \n",
      "\n",
      "   body_mass_g  sex  \n",
      "0       3750.0  1.0  \n",
      "1       3800.0  0.0  \n",
      "2       3250.0  0.0  \n",
      "3          NaN  NaN  \n",
      "4       3450.0  0.0  \n"
     ]
    }
   ],
   "source": [
    "#Importing the CSV\n",
    "penguins=pd.read_csv(\"/Users/sumanthmeela/Desktop/Course/Machine Learning/datasets/penguins.csv\")\n",
    "print(penguins.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "63a00299",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "species              0\n",
      "island               0\n",
      "bill_length_mm       0\n",
      "bill_depth_mm        0\n",
      "flipper_length_mm    0\n",
      "body_mass_g          0\n",
      "sex                  0\n",
      "dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>species</th>\n",
       "      <th>island</th>\n",
       "      <th>bill_length_mm</th>\n",
       "      <th>bill_depth_mm</th>\n",
       "      <th>flipper_length_mm</th>\n",
       "      <th>body_mass_g</th>\n",
       "      <th>sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Adelie</td>\n",
       "      <td>Torgersen</td>\n",
       "      <td>39.1</td>\n",
       "      <td>18.7</td>\n",
       "      <td>181.0</td>\n",
       "      <td>3750.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Adelie</td>\n",
       "      <td>Torgersen</td>\n",
       "      <td>39.5</td>\n",
       "      <td>17.4</td>\n",
       "      <td>186.0</td>\n",
       "      <td>3800.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adelie</td>\n",
       "      <td>Torgersen</td>\n",
       "      <td>40.3</td>\n",
       "      <td>18.0</td>\n",
       "      <td>195.0</td>\n",
       "      <td>3250.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Adelie</td>\n",
       "      <td>Torgersen</td>\n",
       "      <td>36.7</td>\n",
       "      <td>19.3</td>\n",
       "      <td>193.0</td>\n",
       "      <td>3450.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Adelie</td>\n",
       "      <td>Torgersen</td>\n",
       "      <td>39.3</td>\n",
       "      <td>20.6</td>\n",
       "      <td>190.0</td>\n",
       "      <td>3650.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  species     island  bill_length_mm  bill_depth_mm  flipper_length_mm  \\\n",
       "0  Adelie  Torgersen            39.1           18.7              181.0   \n",
       "1  Adelie  Torgersen            39.5           17.4              186.0   \n",
       "2  Adelie  Torgersen            40.3           18.0              195.0   \n",
       "4  Adelie  Torgersen            36.7           19.3              193.0   \n",
       "5  Adelie  Torgersen            39.3           20.6              190.0   \n",
       "\n",
       "   body_mass_g  sex  \n",
       "0       3750.0  1.0  \n",
       "1       3800.0  0.0  \n",
       "2       3250.0  0.0  \n",
       "4       3450.0  0.0  \n",
       "5       3650.0  1.0  "
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(penguins.isnull().sum())\n",
    "penguins=penguins.dropna()\n",
    "penguins.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "a33247b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       bill_length_mm  bill_depth_mm  flipper_length_mm  body_mass_g  \\\n",
      "count      333.000000     333.000000         333.000000   333.000000   \n",
      "mean        43.992793      17.164865         200.966967  4207.057057   \n",
      "std          5.468668       1.969235          14.015765   805.215802   \n",
      "min         32.100000      13.100000         172.000000  2700.000000   \n",
      "25%         39.500000      15.600000         190.000000  3550.000000   \n",
      "50%         44.500000      17.300000         197.000000  4050.000000   \n",
      "75%         48.600000      18.700000         213.000000  4775.000000   \n",
      "max         59.600000      21.500000         231.000000  6300.000000   \n",
      "\n",
      "              sex  \n",
      "count  333.000000  \n",
      "mean     0.504505  \n",
      "std      0.500732  \n",
      "min      0.000000  \n",
      "25%      0.000000  \n",
      "50%      1.000000  \n",
      "75%      1.000000  \n",
      "max      1.000000  \n"
     ]
    }
   ],
   "source": [
    "#Stats\n",
    "summary=penguins.describe()\n",
    "print(summary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "7c01fdd6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "bill_length_mm        float64\n",
      "bill_depth_mm         float64\n",
      "flipper_length_mm     float64\n",
      "body_mass_g           float64\n",
      "sex                  category\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "#Changing strings to categories\n",
    "penguins['species'] = penguins['species'].astype('category')\n",
    "penguins['island'] = penguins['island'].astype('category')\n",
    "penguins['sex'] = penguins['sex'].astype('category')\n",
    "#Dropping species and Island as those are category columns\n",
    "penguins=penguins.drop(['species', 'island'], axis=1)\n",
    "print(penguins.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "00825aa6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Min-Max normalization function\n",
    "def min_max_normalize(value, min_val, max_val):\n",
    "    return (value - min_val) / (max_val - min_val)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "2bfedb17",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Defining normalized columns\n",
    "normalize_columns = ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']\n",
    "minimum_values = penguins[normalize_columns].min()\n",
    "maximum_values = penguins[normalize_columns].max()\n",
    "\n",
    "# Apply min-max normalization to selected columns\n",
    "for col in normalize_columns:\n",
    "    penguins[col] = penguins[col].apply(min_max_normalize, args=(minimum_values[col], maximum_values[col]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "0ede0e3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bill_length_mm</th>\n",
       "      <th>bill_depth_mm</th>\n",
       "      <th>flipper_length_mm</th>\n",
       "      <th>body_mass_g</th>\n",
       "      <th>sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.254545</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.152542</td>\n",
       "      <td>0.291667</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.269091</td>\n",
       "      <td>0.511905</td>\n",
       "      <td>0.237288</td>\n",
       "      <td>0.305556</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.298182</td>\n",
       "      <td>0.583333</td>\n",
       "      <td>0.389831</td>\n",
       "      <td>0.152778</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.167273</td>\n",
       "      <td>0.738095</td>\n",
       "      <td>0.355932</td>\n",
       "      <td>0.208333</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.261818</td>\n",
       "      <td>0.892857</td>\n",
       "      <td>0.305085</td>\n",
       "      <td>0.263889</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   bill_length_mm  bill_depth_mm  flipper_length_mm  body_mass_g  sex\n",
       "0        0.254545       0.666667           0.152542     0.291667  1.0\n",
       "1        0.269091       0.511905           0.237288     0.305556  0.0\n",
       "2        0.298182       0.583333           0.389831     0.152778  0.0\n",
       "4        0.167273       0.738095           0.355932     0.208333  0.0\n",
       "5        0.261818       0.892857           0.305085     0.263889  1.0"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "penguins.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "e977123c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(333, 4)\n",
      "(333, 1)\n"
     ]
    }
   ],
   "source": [
    "X2=np.matrix(penguins.drop(\"sex\",axis=1).values)\n",
    "Y2=np.matrix(penguins[\"sex\"].values).T\n",
    "print(X2.shape)\n",
    "print(Y2.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "093e7afa",
   "metadata": {},
   "outputs": [],
   "source": [
    "#To randomize the order\n",
    "np.random.seed(123)\n",
    "#Total no of rows\n",
    "Tot_samples2=X2.shape[0]\n",
    "#Splitting train data by X 0.8 over total samples\n",
    "Train_samples2=int(0.8*Tot_samples2)\n",
    "Test_samples2=Tot_samples2-Train_samples2\n",
    "#Giving index to the total_samples \n",
    "index2 = np.arange(Tot_samples2)\n",
    "#Shuffling the index\n",
    "np.random.shuffle(index2)\n",
    "#Selecting first number of train rows from randmo shuffling\n",
    "Train_rows2=index2[:Train_samples2]\n",
    "#Selecting the last rows after total number of train rows\n",
    "Test_rows2=index2[Train_samples2:]\n",
    "\n",
    "X_train2 = X2[Train_rows2]\n",
    "Y_train2 = Y2[Train_rows2]\n",
    "X_test2 = X2[Test_rows2]\n",
    "Y_test2 = Y2[Test_rows2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "a23dd58b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train2 shape: (266, 4)\n",
      "y_train2 shape: (266, 1)\n",
      "X_test2 shape: (67, 4)\n",
      "y_test2 shape: (67, 1)\n"
     ]
    }
   ],
   "source": [
    "#Shapes\n",
    "print(\"X_train2 shape:\", X_train2.shape)\n",
    "print(\"y_train2 shape:\", Y_train2.shape)\n",
    "print(\"X_test2 shape:\", X_test2.shape)\n",
    "print(\"y_test2 shape:\", Y_test2.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "b55f898a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "#Defining class\n",
    "class LogisticRegression:\n",
    "    #Giving learning rate and iterations\n",
    "    def __init__(self, learning_rate=0.1, iterations=1000000):\n",
    "        self.learning_rate = learning_rate\n",
    "        self.iterations = iterations\n",
    "        self.weights = None\n",
    "        self.bias = None\n",
    "    \n",
    "#Function for fitting     \n",
    "    def fit(self, X_train2, Y_train2):\n",
    "        self.weights = np.zeros(X_train2.shape[1])\n",
    "        self.bias = 0\n",
    "        self.loss=[]\n",
    "\n",
    "        for i in range(self.iterations):\n",
    "            self.gradient_descent(X_train2, Y_train2)\n",
    "\n",
    "#Sigmoid function 1/(1+e^-z)             \n",
    "    def sigmoid(self, z):\n",
    "        return 1 / (1 + np.exp(-z))\n",
    "    \n",
    "#Loss function\n",
    "    def cost(self, Y_train2, Y_train2_pred):\n",
    "        return -np.mean(Y_train2 * np.log(Y_train2_pred) + (1 - Y_train2) * np.log(1 - Y_train2_pred))\n",
    "\n",
    "    #Gradient descent for optimization to find out the btes weights        \n",
    "    def gradient_descent(self, X_train2, Y_train2):\n",
    "        a = X_train2.shape[0]\n",
    "        b = np.dot(X_train2, self.weights) + self.bias\n",
    "        Y_train2_pred = self.sigmoid(b).T\n",
    "\n",
    "        dw = (1 / a) * np.dot(X_train2.T, (Y_train2_pred - Y_train2))\n",
    "        db = (1 / a) * np.sum(Y_train2_pred - Y_train2)\n",
    "        \n",
    "        converted_dw = dw.A.ravel()\n",
    "\n",
    "        self.weights = self.weights - (self.learning_rate * converted_dw)\n",
    "        self.bias -= self.learning_rate * db\n",
    "        \n",
    "#Predicting for train data\n",
    "    def predict(self, X_train2):\n",
    "        z = np.dot(X_train2, self.weights) + self.bias\n",
    "        #Applying sigmoid function over z\n",
    "        Y_train2_pred = self.sigmoid(z)\n",
    "        return (Y_train2_pred >= 0.5).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "id": "fadc4d5c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjcAAAHFCAYAAAAOmtghAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8pXeV/AAAACXBIWXMAAA9hAAAPYQGoP6dpAABEmUlEQVR4nO3deXxU1f3/8fdkm+wBAoQEQlgUAdmlKCACIiBQFBGl2hpA/VaqFpWiQvEHaFXqjqCAbRFckKKIiJYiuLCICwSIWygoBBIkAQJmISHrnN8fISMxAZI4MzczvJ6PxzzI3Dn3zie3lPP2nHPvtRljjAAAAHyEn9UFAAAAuBLhBgAA+BTCDQAA8CmEGwAA4FMINwAAwKcQbgAAgE8h3AAAAJ9CuAEAAD6FcAMAAHwK4QaoJ5YsWSKbzaakpCSrS6mRtWvXasSIEWrSpInsdrvi4+M1btw4paSkWF1aFRs2bJDNZtOKFSuc2z777DPNmjVL2dnZ1hV2jjoGDBigAQMGeLwmwNsRbgDU2gMPPKBhw4bJ4XBo/vz5Wr9+vWbOnKlt27apR48eWrlypdUlntNnn32mhx9+uF6EmzPVMX/+fM2fP9/zRQFeLsDqAgB4l2XLlumpp57Sn/70p0od7xVXXKGbbrpJ/fv31y233KJu3bqpTZs2HquroKBAoaGhHvs+T9TRsWNHlxwHON8wcgN4mU8//VSDBg1SRESEQkND1adPH/3nP/+p1KagoEBTpkxR69atFRwcrEaNGqlnz55atmyZs82+ffv0u9/9TnFxcbLb7YqJidGgQYOUnJx81u9/7LHH1LBhQz399NNVPgsLC9O8efNUUFCg5557TpI0Z84c2Ww2/fDDD1XaP/jggwoKClJWVpZz24cffqhBgwYpMjJSoaGh6tu3rz766KNK+82aNUs2m007duzQmDFj1LBhQ7Vt2/ac5+70/e+//35JUuvWrWWz2WSz2bRhwwZnm+XLl6t3794KCwtTeHi4hg4dqp07d1Y6zvjx4xUeHq5vvvlGQ4YMUUREhAYNGiRJWr9+va699lq1aNFCwcHBuuCCC3THHXdU+l3PVUd101LHjx/XnXfeqebNmysoKEht2rTR9OnTVVRUVKmdzWbT3Xffrddee00dOnRQaGiounbtqvfff79Su6NHj+qPf/yj4uPjZbfb1aRJE/Xt21cffvhhjc8nUN8wcgN4kY0bN2rw4MHq0qWLFi1aJLvdrvnz52vkyJFatmyZxo4dK0maPHmyXnvtNT366KPq3r278vPz9e233+rYsWPOYw0fPlxlZWV68skn1bJlS2VlZemzzz476zRNRkaGvvvuO40dO/aMoxO9e/dW06ZNtX79eknSH/7wBz344INasmSJHn30UWe7srIyvf766xo5cqQaN24sSXr99deVmJioa6+9Vq+88ooCAwP10ksvaejQofrggw+cwaHC6NGj9bvf/U4TJ05Ufn5+jc/j7bffruPHj2vevHlauXKlYmNjJf08UvL444/roYce0oQJE/TQQw+puLhYTz31lPr166etW7dWGlEpLi7WNddcozvuuENTp05VaWmpJGnv3r3q3bu3br/9dkVFRWn//v169tlndfnll+ubb75RYGDgOev4pcLCQg0cOFB79+7Vww8/rC5dumjz5s2aPXu2kpOTq4Tc//znP9q2bZseeeQRhYeH68knn9R1112n3bt3O0fVbrnlFu3YsUOPPfaY2rVrp+zsbO3YsaPS3xXA6xgA9cLixYuNJLNt27YztrnssstM06ZNTV5ennNbaWmp6dSpk2nRooVxOBzGGGM6depkRo0adcbjZGVlGUlmzpw5tarxiy++MJLM1KlTz9ru0ksvNSEhIc73o0ePNi1atDBlZWXObWvWrDGSzHvvvWeMMSY/P980atTIjBw5stKxysrKTNeuXU2vXr2c22bOnGkkmRkzZtSo7k8++cRIMm+99ZZz21NPPWUkmdTU1Ept09LSTEBAgPnzn/9caXteXp5p1qyZufHGG53bxo0bZySZl19++azf73A4TElJiTlw4ICRZN59991z1mGMMf379zf9+/d3vl+4cKGRZN58881K7Z544gkjyaxbt865TZKJiYkxubm5zm2ZmZnGz8/PzJ4927ktPDzc3HvvvWetH/A2TEsBXiI/P19ffvmlxowZo/DwcOd2f39/3XLLLTp48KB2794tSerVq5f++9//aurUqdqwYYNOnjxZ6ViNGjVS27Zt9dRTT+nZZ5/Vzp075XA4XFarMUY2m835fsKECTp48GClqY7FixerWbNmGjZsmKTyhbXHjx/XuHHjVFpa6nw5HA5dffXV2rZtW5XRmeuvv95lNVf44IMPVFpaqsTExEp1BAcHq3///pWmrs5Wx5Ej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1Q8SbmqhV69eZuLEiZW2tW/f3kydOrXa9g888IBp3759pW133HGHueyyy9xWoy+o7XmuTseOHc3DDz/s6tJ8Sl3P89ixY81DDz1kZs6cSbipgdqe5//+978mKirKHDt2zBPl+YzanuennnrKtGnTptK2uXPnmhYtWritRl9Tk3BjVT/ItFQNFRcXa/v27RoyZEil7UOGDNFnn31W7T6ff/55lfZDhw5VUlKSSkpK3FarN6vLef4lh8OhvLw8NWrUyB0l+oS6nufFixdr7969mjlzprtL9Al1Oc+rV69Wz5499eSTT6p58+Zq166dpkyZopMnT3qiZK9Ul/Pcp08fHTx4UGvWrJExRocPH9aKFSs0YsQIT5R83rCqHzzvHpxZV1lZWSorK1NMTEyl7TExMcrMzKx2n8zMzGrbl5aWKisrS7GxsW6r11vV5Tz/0jPPPKP8/HzdeOON7ijRJ9TlPH///feaOnWqNm/erIAA/umoibqc53379unTTz9VcHCw3nnnHWVlZenOO+/U8ePHWXdzBnU5z3369NHSpUs1duxYFRYWqrS0VNdcc43mzZvniZLPG1b1g4zc1JLNZqv03hhTZdu52le3HZXV9jxXWLZsmWbNmqXly5eradOm7irPZ9T0PJeVlenmm2/Www8/rHbt2nmqPJ9Rm7/PDodDNptNS5cuVa9evTR8+HA9++yzWrJkCaM351Cb85ySkqJJkyZpxowZ2r59u9auXavU1FRNnDjRE6WeV6zoB/nPrxpq3Lix/P39q/xXwJEjR6qk0grNmjWrtn1AQICio6PdVqs3q8t5rrB8+XLddttteuutt3TVVVe5s0yvV9vznJeXp6SkJO3cuVN33323pPJO2BijgIAArVu3TldeeaVHavcmdfn7HBsbq+bNmysqKsq5rUOHDjLG6ODBg7rwwgvdWrM3qst5nj17tvr27av7779fktSlSxeFhYWpX79+evTRRxlZdxGr+kFGbmooKChIl1xyidavX19p+/r169WnT59q9+ndu3eV9uvWrVPPnj0VGBjotlq9WV3Os1Q+YjN+/Hi98cYbzJnXQG3Pc2RkpL755hslJyc7XxMnTtRFF12k5ORkXXrppZ4q3avU5e9z3759dejQIZ04ccK5bc+ePfLz81OLFi3cWq+3qst5LigokJ9f5S7Q399f0s8jC/j1LOsH3bpc2cdUXGq4aNEik5KSYu69914TFhZm9u/fb4wxZurUqeaWW25xtq+4BO6+++4zKSkpZtGiRVwKXgO1Pc9vvPGGCQgIMC+++KLJyMhwvrKzs636FbxCbc/zL3G1VM3U9jzn5eWZFi1amDFjxpjvvvvObNy40Vx44YXm9ttvt+pX8Aq1Pc+LFy82AQEBZv78+Wbv3r3m008/NT179jS9evWy6lfwCnl5eWbnzp1m586dRpJ59tlnzc6dO52X3NeXfpBwU0svvviiSUhIMEFBQaZHjx5m48aNzs/GjRtn+vfvX6n9hg0bTPfu3U1QUJBp1aqVWbBggYcr9k61Oc/9+/c3kqq8xo0b5/nCvUxt/z6fjnBTc7U9z7t27TJXXXWVCQkJMS1atDCTJ082BQUFHq7a+9T2PM+dO9d07NjRhISEmNjYWPP73//eHDx40MNVe5dPPvnkrP/e1pd+0GYM428AAMB3sOYGAAD4FMINAADwKYQbAADgUwg3AADApxBuAACATyHcAAAAn0K4AQAAPoVwA+C80KpVK82ZM8fqMgCftmnTJo0cOVJxcXGy2WxatWpVrY9hjNHTTz+tdu3ayW63Kz4+Xo8//nitjkG4AeBy48eP16hRoyRJAwYM0L333uux716yZIkaNGhQZfu2bdv0xz/+0WN1AOej/Px8de3aVS+88EKdj3HPPffoX//6l55++mn973//03vvvadevXrV6hg8FRyAVyguLlZQUFCd92/SpIkLqwFQnWHDhmnYsGFn/Ly4uFgPPfSQli5dquzsbHXq1ElPPPGEBgwYIEnatWuXFixYoG+//VYXXXRRnetg5AaA24wfP14bN27U888/L5vNJpvNpv3790uSUlJSNHz4cIWHhysmJka33HKLsrKynPsOGDBAd999tyZPnqzGjRtr8ODBkqRnn31WnTt3VlhYmOLj43XnnXc6n6C9YcMGTZgwQTk5Oc7vmzVrlqSq01JpaWm69tprFR4ersjISN144406fPiw8/NZs2apW7dueu2119SqVStFRUXpd7/7nfLy8pxtVqxYoc6dOyskJETR0dG66qqrlJ+f76azCXi/CRMmaMuWLfr3v/+tr7/+WjfccIOuvvpqff/995Kk9957T23atNH777+v1q1bq1WrVrr99tt1/PjxWn0P4QaA2zz//PPq3bu3/u///k8ZGRnKyMhQfHy8MjIy1L9/f3Xr1k1JSUlau3atDh8+rBtvvLHS/q+88ooCAgK0ZcsWvfTSS5IkPz8/zZ07V99++61eeeUVffzxx3rggQckSX369NGcOXMUGRnp/L4pU6ZUqcsYo1GjRun48ePauHGj1q9fr71792rs2LGV2u3du1erVq3S+++/r/fff18bN27U3//+d0lSRkaGbrrpJt16663atWuXNmzYoNGjR4vH9QHV27t3r5YtW6a33npL/fr1U9u2bTVlyhRdfvnlWrx4sSRp3759OnDggN566y29+uqrWrJkibZv364xY8bU6ruYlgLgNlFRUQoKClJoaKiaNWvm3L5gwQL16NGj0iLBl19+WfHx8dqzZ4/atWsnSbrgggv05JNPVjrm6et3Wrdurb/97W/605/+pPnz5ysoKEhRUVGy2WyVvu+XPvzwQ3399ddKTU1VfHy8JOm1117TxRdfrG3btuk3v/mNJMnhcGjJkiWKiIiQJN1yyy366KOP9NhjjykjI0OlpaUaPXq0EhISJEmdO3f+FWcL8G07duyQMcb5/+8KRUVFio6OllT+/7mioiK9+uqrznaLFi3SJZdcot27d9d4qopwA8Djtm/frk8++UTh4eFVPtu7d6/zH7WePXtW+fyTTz7R448/rpSUFOXm5qq0tFSFhYXKz89XWFhYjb5/165dio+PdwYbSerYsaMaNGigXbt2OcNNq1atnMFGkmJjY3XkyBFJUteuXTVo0CB17txZQ4cO1ZAhQzRmzBg1bNiw5icCOI84HA75+/tr+/bt8vf3r/RZxb8FsbGxCggIqBSAOnToIKl8Krmm4YZpKQAe53A4NHLkSCUnJ1d6ff/997riiiuc7X4ZVg4cOKDhw4erU6dOevvtt7V9+3a9+OKLkqSSkpIaf78xRjab7ZzbAwMDK31us9nkcDgkSf7+/lq/fr3++9//qmPHjpo3b54uuugipaam1rgO4HzSvXt3lZWV6ciRI7rgggsqvSpGWvv27avS0lLt3bvXud+ePXskyTlCWhOM3ABwq6CgIJWVlVXa1qNHD7399ttq1aqVAgJq/s9QUlKSSktL9cwzz8jPr/y/zd58881zft8vdezYUWlpaUpPT3eO3qSkpCgnJ8f5X4k1YbPZ1LdvX/Xt21czZsxQQkKC3nnnHU2ePLnGxwB8yYkTJ/TDDz8436empio5OVmNGjVSu3bt9Pvf/16JiYl65pln1L17d2VlZenjjz9W586dNXz4cF111VXq0aOHbr31Vs2ZM0cOh0N33XWXBg8eXGU662wYuQHgVq1atdKXX36p/fv3Kysry/mP1fHjx3XTTTdp69at2rdvn9atW6dbb731rMGkbdu2Ki0t1bx587Rv3z699tprWrhwYZXvO3HihD766CNlZWWpoKCgynGuuuoqdenSRb///e+1Y8cObd26VYmJierfv3+1U2HV+fLLL/X4448rKSlJaWlpWrlypY4ePVqrcAT4mqSkJHXv3l3du3eXJE2ePFndu3fXjBkzJEmLFy9WYmKi/vKXv+iiiy7SNddcoy+//NL5Hxl+fn5677331LhxY11xxRUaMWKEOnTooH//+9+1K8QAgIuNGzfOXHvttcYYY3bv3m0uu+wyExISYiSZ1NRUY4wxe/bsMdddd51p0KCBCQkJMe3btzf33nuvcTgcxhhj+vfvb+65554qx3722WdNbGysCQkJMUOHDjWvvvqqkWR++uknZ5uJEyea6OhoI8nMnDnTGGNMQkKCee6555xtDhw4YK655hoTFhZmIiIizA033GAyMzOdn8+cOdN07dq10nc/99xzJiEhwRhjTEpKihk6dKhp0qSJsdvtpl27dmbevHm/5rQBcBGbMVy3CAAAfAfTUgAAwKcQbgAAgE8h3AAAAJ9CuAEAAD6FcAMAAHwK4QYAAPgUwg0AAPAphBsAAOBTCDcAAMCnEG4AAIBPIdwAAACfQrgBAAA+5f8DenI8JA5b1RYAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#calling class to fit over train data\n",
    "abc=LogisticRegression()\n",
    "abc.fit(X_train2,Y_train2)\n",
    "Y_test2_pred=abc.predict(X_test2)\n",
    "Y_train2_pred=abc.predict(X_train2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "id": "1e2368e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating functions for accuracy, correct and wrong predictions\n",
    "def accuracy(y_pred, y_test):\n",
    "    return np.sum(y_pred==y_test)/len(y_test)\n",
    "def correct(y_pred, y_test):\n",
    "    return np.sum(y_pred==y_test)\n",
    "def wrong(y_pred, y_test):\n",
    "    return np.sum(y_pred!=y_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "id": "42f824fe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train accuracy: 91.72932330827066\n",
      "Test accuracy: 82.08955223880598\n",
      "Train correct: 244\n",
      "Test correct: 55\n",
      "Train wrong: 22\n",
      "Test wrong: 12\n"
     ]
    }
   ],
   "source": [
    "#Storing accuracy, correct and wrong values of test data in variables\n",
    "train_acc = accuracy(Y_train2_pred.T, Y_train2)\n",
    "test_acc = accuracy(Y_test2_pred.T, Y_test2)\n",
    "train_cor = correct(Y_train2_pred.T, Y_train2)\n",
    "test_cor = correct(Y_test2_pred.T, Y_test2)\n",
    "train_wrong = wrong(Y_train2_pred.T, Y_train2)\n",
    "test_wrong = wrong(Y_test2_pred.T, Y_test2)\n",
    "\n",
    "#Results for the above model\n",
    "print(\"Train accuracy:\", train_acc*100)\n",
    "print(\"Test accuracy:\", test_acc*100)\n",
    "print(\"Train correct:\", train_cor)\n",
    "print(\"Test correct:\", test_cor)\n",
    "print(\"Train wrong:\", train_wrong)\n",
    "print(\"Test wrong:\", test_wrong)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
